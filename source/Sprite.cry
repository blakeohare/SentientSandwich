import Math;
import Random;
import TwoCansAlpha4;

const GRAVITY = .1;
const TERMINAL_VELOCITY = .9;

enum RoachState {
	WAIT,
	SCUTTLE,
	CHASE,
}

class Sprite {
	static field CANT_EAT = {
		'antibiotics': true,
		'mayo': true,
	};
	
	static field ID_ALLOC = 0;
	
	static field SPRITE_HEIGHTS = {
		'antibiotics': 3,
		'mayo': 3,
		'player': .75,
		'olive': 1.25,
		'soda': 4,
		'egg1': 2.3,
		'egg2': 2.3,
		'egg3': 2.3,
		'fly': 0.667,
		'dancer1': 2.4,
		'dancer2': 2.4,
		'cheese': 2,
		'banner': 2,
		'roach1': 1.4,
		'roach2': 3,
		'broccoli': 2.1,
		'explain1': 2,
		'explain2': 2,
		'explain3': 2,
		'explain4': 2,
		'explain5': 2,
		'explain6': 2,
		'explain7': 2,
		'explain8': 2,
		'explain9': 2,
		'explain0': 2,
		'strobe': 6,
	};

	static field IS_SIGN = {
		'strobe': true,
		'roach2': true,
		'dancer1': true,
		'dancer2': true,
		'explain0': true,
		'explain1': true,
		'explain2': true,
		'explain3': true,
		'explain4': true,
		'explain5': true,
		'explain6': true,
		'explain7': true,
		'explain8': true,
		'explain9': true,
	};

	field x;
	field y;
	field dx;
	field dy;
	field type;
	field width;
	field height;
	field pixel_height;
	field ground;
	field vy;
	field facing_right;
	field walking;
	field player_default_height;
	field dead;
	field ghost;
	field immune;
	field is_fly;
	field is_roach;
	field unique_id;
	field counter;
	field start_x;
	field start_y;
	field death_counter;
	field state;
	field state_counter;
	field roach_left;
	field wait_expire;
	field rand;
	field map;
	field inhaling;
	field scene;
	
	constructor(type, x, y) {
		this.x = x + 0.0;
		this.y = y + 0.0;
		this.dx = 0;
		this.dy = 0;
		this.type = type;
		// TODO: better sprite definition system.
		this.width = .75;
		this.height = Sprite.SPRITE_HEIGHTS[this.type];
		this.pixel_height = Math.floor(this.height * 40);
		this.ground = null;
		this.vy = 0;
		this.facing_right = true;
		this.walking = false;
		this.player_default_height = Images.get('images/sprites/player/stand.png').height;
		this.dead = false;
		this.immune = Sprite.IS_SIGN.get(type, false);
		this.ghost = this.immune;
		this.is_fly = type == 'fly';
		this.is_roach = type == 'roach1';
		this.unique_id = Sprite.ID_ALLOC++;
		this.counter = 0;
		this.start_x = this.x;
		this.start_y = this.y;
		this.death_counter = 0;
		this.state = RoachState.WAIT;
		this.state_counter = Math.floor(Random.randomFloat() * FPS * 2);
		this.roach_left = Random.randomBool();
		this.wait_expire = Math.floor(Random.randomFloat() * FPS * 2);
		this.rand = Math.floor(Random.randomFloat() * FPS);
	}
	
	function update(scene, grid) {
		this.counter++;
		// Phase 1: apply y vector
		
		player = scene.player;
		
		if (this.type == 'roach2') {
			this.x = player.x;
			this.y = player.y + 1;
		} else if (this.ghost) {
			this.x += this.dx;
			this.y += this.dy;
			this.dx = 0;
			this.dy = 0;
			this.ground = null;
		} else if (this.is_fly && !this.ghost) {
			target_x = 3 * Math.cos(this.unique_id + 2 * 3.14159 * this.counter / (FPS * 3)) + this.start_x;
			target_y = .6 * Math.sin(this.unique_id + 2 * 3.14159 * this.counter / (FPS * 4.5)) + this.start_y;
			
			dx = target_x - this.x;
			dy = target_y - this.y;
			dist = (dx ** 2 + dy ** 2) ** .5;
			if (dist > .4) {
				dx = .4 * dx / dist;
				dy = .4 * dy / dist;
			}
			
			this.x += dx;
			this.y += dy;
		} else {
			if (this.is_roach && !this.ghost) {
				dy = Math.abs(player.y - this.y);
				if (dy < .5) {
					this.state = RoachState.SCUTTLE;
					this.state_counter = 0;
					this.roach_left = player.x < this.x;
					if (Math.abs(player.x - this.x) < .25) {
						this.dead = true;
						this.map.scene.sprites.add(new Sprite('roach2', player.x, player.y + 1));
						if (player.death_counter == 0) {
							player.death_counter = 1;
							scene.switchScene(new FadeTransitionScene(scene, new PlayScene(scene.id)));
						}
						return;
					}
				}
				
				switch (this.state) {
					case RoachState.WAIT:
						if (this.state_counter > this.wait_expire) {
							this.state_counter = 0;
							this.state = RoachState.SCUTTLE;
							this.roach_left = Random.randomBool();
						}
						break;
					case RoachState.SCUTTLE:
						if (this.state_counter > FPS * 2) {
							this.state_counter = 0;
							this.state = RoachState.WAIT;
							this.wait_expire = Math.floor(FPS * 2 * Random.randomFloat());
						}
						this.dx = this.roach_left ? -.23 : .23;
						break;
					case RoachState.CHASE:
						break;
				}
				this.state_counter++;
			}
			effective_height = this.height * .9;
			
			if (this.ground != null) {
				// you are standing on ground. set Y to the ground value.
				this.y = this.ground.y;
				this.vy = 0;
			} else {
				this.vy += GRAVITY;
				//if (Math.abs(this.vy) > TERMINAL_VELOCITY) {
				//	this.vy = (this.vy < 0) ? -TERMINAL_VELOCITY : TERMINAL_VELOCITY;
				//}
				new_y = this.y + this.vy;
				col = Math.floor(this.x);
				if (this.vy < 0) {
					// you are flying up in the air
					// check to see if you bonk your head.
					top_y = new_y - effective_height;
					new_row = Math.floor(top_y);
					old_row = Math.floor(this.y - effective_height);
					bonks = false;
					for (row = old_row; row >= new_row; --row) {
						tile = grid[col][row];
						if (tile.blocking) {
							// BONK!
							bonks = true;
							this.vy = 0;
							this.y = row + 1 + effective_height + EPSILON;
							break;
						}
					}
					
					if (!bonks) {
						this.y = new_y;
					}
				} else {
					// you are falling down
					old_row = Math.floor(this.y);
					new_row = Math.floor(new_y);
					lands = false;
					for (row = old_row; row <= new_row; ++row) {
						tile = grid[col][row];
						if (tile.blocking) {
							this.y = tile.y + 0.0;
							this.ground = tile;
							lands = true;
							break;
						}
					}
					
					if (!lands) {
						this.y = new_y;
					}
				}
			}
			
			// Phase 2: apply x vector
			
			this.walking = false;
			if (this.dx != 0) {
				this.walking = true;
				this.facing_right = this.dx > 0;
				new_x = this.x + this.dx;
				old_col = Math.floor(this.x);
				new_col = Math.floor(new_x);
				if (old_col == new_col) {
					this.x = new_x;
				} else {
					bottom_y = Math.floor(this.y - EPSILON);
					top_y = Math.floor(this.y - effective_height);
					blocked = false;
					for (y = top_y; y <= bottom_y; ++y) {
						tile = grid[new_col][y];
						if (tile.blocking) {
							blocked = true;
						}
					}
					
					if (blocked) {
						if (this.dx > 0) {
							this.x = new_col - EPSILON;
						} else {
							this.x = new_col + 1 + EPSILON;
						}
					} else {
						this.x = new_x;
						if (this.ground != null) {
							new_ground = grid[new_col][Math.floor(this.y)];
							if (new_ground.blocking) {
								this.ground = new_ground;
							} else {
								this.ground = null;
							}
						}
					}
				}
				this.dx = 0;	
			}
		}
	}
	
	function render(rc, offset_x, offset_y) {
		
		if (this.type == 'player') {
			
			if (this.death_counter > 0) {
				this.death_counter++;
			}
			bottom = Math.floor(this.y * 40);
			height = Math.floor(this.height * 40);
			top = bottom - height;
			
			scale = 1.0 * height / this.player_default_height;
			flipped = this.facing_right;
			if (this.inhaling) {
				path = 'sprites/player/inhale.png';
			} else if (this.ground == null) {
				if (this.vy < 0) {
					path = 'sprites/player/jumpup.png';
				} else {
					path = 'sprites/player/jump.png';
				}
			} else if (this.walking) {
				path = 'sprites/player/walk' + ((rc / 3) % 6 + 1) + '.png';
			} else {
				path = 'sprites/player/stand.png';
			}
			scale = scale * (.95 ** this.death_counter);
			if (scale < .1) scale = .1;
			img = Images.getAtScale('images/' + path, scale, flipped ? ImageOptions.FLIP_X : ImageOptions.NONE);
			
			width = img.width;
			left = Math.floor(this.x * 40 - width / 2);
			
			img.draw(left - offset_x, top - offset_y);
			
		} else {
			
			x = Math.floor(this.x * 40 - offset_x);
			y = Math.floor(this.y * 40 - offset_y);
			
			switch (this.type) {
				case 'dancer1':
				case 'dancer2':
					alt = this.type == 'dancer1'
						? 'sprites/player/kick.png'
						: 'sprites/player/crouch.png';
					r = rc + this.rand;
					path = (r % 30 < 10) 
						? 'sprites/player/stand.png'
						: alt;
					if ((r % FPS) == 20) {
						this.facing_right = !this.facing_right;
						//this.dx = this.facing_right ? -.001 : .001;
					}
					img = Images.getAtScale('images/' + path, .3, this.facing_right ? ImageOptions.FLIP_X : ImageOptions.NONE);
					img.draw(x - img.width / 2, y - img.height);
					break;
				case 'fly':
					path = 'sprites/fly/fly' + ((rc / 3) % 2 + 1) + '.png';
					img = Images.getWithHeight('images/' + path, this.pixel_height);
					img.draw(x - img.width / 2, y - img.height);
					break;
				case 'mayo':
					path = 'sprites/mayo/stand' + ((rc / 5) % 2 + 1) + '.png';
					img = Images.getWithHeight('images/' + path, this.pixel_height);
					img.draw(x - img.width / 2, y - img.height);
					break;
				case 'strobe':
					path = 'sprites/strobe/strobe' + ((rc / 4) % 4 + 1) + '.png';
					img = Images.getWithHeight('images/' + path, this.pixel_height);
					img.draw(x - img.width / 2, y - img.height);
					break;
				case 'roach1':
					if (this.walking) {
						path = 'sprites/roach1/walk' + ((rc / 2) % 5 + 1) + '.png';
					} else {
						path = 'sprites/roach1/stand.png';
					}
					scale = 80.0 / 157;
					img = Images.getAtScale('images/' + path, scale, this.facing_right ? ImageOptions.FLIP_X : ImageOptions.NONE);
					img.draw(x - img.width / 2, y - img.height);
					break;
				case 'roach2':
				case 'antibiotics':
				case 'olive':
				case 'broccoli':
				case 'cheese':
				case 'soda':
				case 'egg1':
				case 'egg2':
				case 'egg3':
					if (this.type == 'egg3') {
						yo = Math.sin(rc * 2 * 3.14159 / FPS / 2) - .7;
						if (yo < 0) yo = 0;
						y -= Math.floor(yo * 50);
					}
					path = 'sprites/' + this.type + '/stand.png';
					img = Images.getWithHeight('images/' + path, this.pixel_height);
					img.draw(x - img.width / 2, y - img.height);
					break;
				case 'explain1':
				case 'explain2':
				case 'explain3':
				case 'explain4':
				case 'explain5':
				case 'explain6':
				case 'explain7':
				case 'explain8':
				case 'explain9':
				case 'explain0':
					img = Images.getWithHeight('images/sprites/explain/' + this.type[7:] + '.png', this.pixel_height);
					img.draw(x - img.width / 2, y - img.height);
					break;

				default:
					throw new Exception("No rendering defined for sprite type: " + this.type);
			}
			
		}
	}
}
