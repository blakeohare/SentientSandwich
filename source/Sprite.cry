GRAVITY = .1;
TERMINAL_VELOCITY = .9;

PLAYER_IMAGE_BY_SCALE = {};

SPRITE_HEIGHTS = {
	'antibiotics': 3,
	'mayo': 3,
	'player': .75,
	'olive': 1.25,
	'soda': 4,
	'egg1': 2.3,
	'egg2': 2.3,
	'egg3': 2.3,
	'fly': 0.667,
	'broccoli': 2.1,
	'explain1': 2,
	'explain2': 2,
	'explain3': 2,
	'explain4': 2,
	'explain5': 2,
	'explain6': 2,
	'explain7': 2,
};

IS_SIGN = {};
for (i = 1; i < 100; ++i) {
	IS_SIGN['explain' + i] = true;
}

SPRITE_ID_ALLOC = [0];

class Sprite {
	constructor(type, x, y) {
		this.x = x + 0.0;
		this.y = y + 0.0;
		this.dx = 0;
		this.dy = 0;
		this.type = type;
		// TODO: better sprite definition system.
		this.width = .75;
		this.height = SPRITE_HEIGHTS[this.type];
		this.pixel_height = $floor(this.height * 40);
		this.ground = null;
		this.vy = 0;
		this.dx = 0;
		this.facing_right = true;
		this.walking = false;
		this.player_default_height = IMAGES.get('sprites/player/stand.png').height;
		this.dead = false;
		this.ghost = false;
		this.immune = IS_SIGN.get(type, false);
		this.ghost = this.immune;
		this.is_fly = type == 'fly';
		this.unique_id = SPRITE_ID_ALLOC[0]++;
		this.counter = 0;
		this.start_x = this.x;
		this.start_y = this.y;
	}
	
	function update(scene, grid) {
		this.counter++;
		// Phase 1: apply y vector
		
		if (this.ghost) {
			this.x += this.dx;
			this.y += this.dy;
			this.dx = 0;
			this.dy = 0;
			this.ground = null;
		} else if (this.is_fly && !this.ghost) {
			target_x = 3 * $cos(this.unique_id + 2 * 3.14159 * this.counter / (FPS * 3)) + this.start_x;
			target_y = .6 * $sin(this.unique_id + 2 * 3.14159 * this.counter / (FPS * 4.5)) + this.start_y;
			
			dx = target_x - this.x;
			dy = target_y - this.y;
			dist = (dx ** 2 + dy ** 2) ** .5;
			if (dist > .4) {
				dx = .4 * dx / dist;
				dy = .4 * dy / dist;
			}
			
			this.x += dx;
			this.y += dy;
			
		} else {
			
			effective_height = this.height * .9;
			
			if (this.ground != null) {
				// you are standing on ground. set Y to the ground value.
				this.y = this.ground.y;
				this.vy = 0;
			} else {
				this.vy += GRAVITY;
				//if ($abs(this.vy) > TERMINAL_VELOCITY) {
				//	this.vy = (this.vy < 0) ? -TERMINAL_VELOCITY : TERMINAL_VELOCITY;
				//}
				new_y = this.y + this.vy;
				col = $floor(this.x);
				if (this.vy < 0) {
					// you are flying up in the air
					// check to see if you bonk your head.
					top_y = new_y - effective_height;
					new_row = $floor(top_y);
					old_row = $floor(this.y - effective_height);
					bonks = false;
					for (row = old_row; row >= new_row; --row) {
						tile = grid[col][row];
						if (tile.blocking) {
							// BONK!
							bonks = true;
							this.vy = 0;
							this.y = row + 1 + effective_height + EPSILON;
							break;
						}
					}
					
					if (!bonks) {
						this.y = new_y;
					}
				} else {
					// you are falling down
					old_row = $floor(this.y);
					new_row = $floor(new_y);
					lands = false;
					for (row = old_row; row <= new_row; ++row) {
						tile = grid[col][row];
						if (tile.blocking) {
							this.y = tile.y + 0.0;
							this.ground = tile;
							lands = true;
							break;
						}
					}
					
					if (!lands) {
						this.y = new_y;
					}
				}
			}
			
			// Phase 2: apply x vector
			
			this.walking = false;
			if (this.dx != 0) {
				this.walking = true;
				this.facing_right = this.dx > 0;
				new_x = this.x + this.dx;
				old_col = $floor(this.x);
				new_col = $floor(new_x);
				if (old_col == new_col) {
					this.x = new_x;
				} else {
					bottom_y = $floor(this.y - EPSILON);
					top_y = $floor(this.y - effective_height);
					blocked = false;
					for (y = top_y; y <= bottom_y; ++y) {
						tile = grid[new_col][y];
						if (tile.blocking) {
							blocked = true;
						}
					}
					
					if (blocked) {
						if (this.dx > 0) {
							this.x = new_col - EPSILON;
						} else {
							this.x = new_col + 1 + EPSILON;
						}
					} else {
						this.x = new_x;
						if (this.ground != null) {
							new_ground = grid[new_col][$floor(this.y)];
							if (new_ground.blocking) {
								this.ground = new_ground;
							} else {
								this.ground = null;
							}
						}
					}
				}
				this.dx = 0;	
			}
		}
	}
	
	function render(rc, offset_x, offset_y) {
		
		if (this.type == 'player') {
			bottom = $floor(this.y * 40);
			height = $floor(this.height * 40);
			top = bottom - height;
			
			scale = 1.0 * height / this.player_default_height;
			flipped = this.facing_right;
			if (this.inhaling) {
				path = 'sprites/player/inhale.png';
			} else if (this.ground == null) {
				if (this.vy < 0) {
					path = 'sprites/player/jumpup.png';
				} else {
					path = 'sprites/player/jump.png';
				}
			} else if (this.walking) {
				path = 'sprites/player/walk' + ((rc / 3) % 6 + 1) + '.png';
			} else {
				path = 'sprites/player/stand.png';
			}
			img = IMAGES.get_scaled(path, scale, flipped);
			
			width = img.width;
			left = $floor(this.x * 40 - width / 2);
			
			$gfx_blit_image(img, left - offset_x, top - offset_y);
			
		} else {
			
			x = $floor(this.x * 40 - offset_x);
			y = $floor(this.y * 40 - offset_y);
			
			switch (this.type) {
				case 'fly':
					path = 'sprites/fly/fly' + ((rc / 3) % 2 + 1) + '.png';
					img = IMAGES.get_at_height(path, this.pixel_height);
					$gfx_blit_image(img, x - img.width / 2, y - img.height);
					break;
				case 'mayo':
					path = 'sprites/mayo/stand' + ((rc / 5) % 2 + 1) + '.png';
					img = IMAGES.get_at_height(path, this.pixel_height);
					$gfx_blit_image(img, x - img.width / 2, y - img.height);
					break;
				case 'antibiotics':
				case 'olive':
				case 'broccoli':
				case 'soda':
				case 'egg1':
				case 'egg2':
				case 'egg3':
					if (this.type == 'egg3') {
						yo = $sin(rc * 2 * 3.14159 / FPS / 2) - .7;
						if (yo < 0) yo = 0;
						y -= $floor(yo * 50);
					}
					path = 'sprites/' + this.type + '/stand.png';
					img = IMAGES.get_at_height(path, this.pixel_height);
					$gfx_blit_image(img, x - img.width / 2, y - img.height);
					break;
				case 'explain1':
				case 'explain2':
				case 'explain3':
				case 'explain4':
				case 'explain5':
				case 'explain6':
				case 'explain7':
					img = IMAGES.get_at_height('sprites/explain/' + this.type[7:] + '.png', this.pixel_height);
					$gfx_blit_image(img, x - img.width / 2, y - img.height);
					break;
				default:
					$assert(false, "No rendering defined for sprite type: " + this.type);
					break;
			}
			
		}
	}
}