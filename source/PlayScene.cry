class PlayScene : AbstractScene {
	constructor(id) : base() {
		this.id = id;
		this.map = new Map(id);
		this.player = null;
		this.sprites = [];
		for (sprite_data : this.map.sprites) {
			type = sprite_data[0];
			x = sprite_data[1] + .5;
			y = sprite_data[2] + 1;
			sprite = new Sprite(type, x, y);
			if (type == 'player') {
				this.player = sprite;
			}
			this.sprites.add(sprite);
		}
	}
	
	function update(events, pressed_keys) {
		for (event : events) {
			switch (event.key) {
				case 'space':
					if (event.down) {
						if (this.player.ground != null) {
							this.player.ground = null;
							this.player.vy = -.9;
						}
					} else {
						if (this.player.ground == null && this.player.vy < 0) {
							this.player.vy = 0;
						}
					}
					break;
				default:
					break;
			}
		}
		
		v = .2;
		if (pressed_keys.get('left', false)) {
			this.player.dx = -v;
		} else if (pressed_keys.get('right', false)) {
			this.player.dx = v;
		}
		
		grid = this.map.grid;
		for (sprite : this.sprites) {
			sprite.update(this, grid);
		}
	}
	
	function render(rc) {
		offset_x = $floor(this.player.x * 40) - GAME_WIDTH / 2;
		offset_y = $floor((this.player.y - this.player.height / 2) * 40) - GAME_HEIGHT / 2;
		// TODO: bound the edges so you don't see the void beyond the fridge
		// TODO: ...unless the width or height is smaller than the screen, in which case center the map.
		height = this.map.height;
		width = this.map.width;
		grid = this.map.grid;
		for (y = 0; y < height; ++y) {
			for (x = 0; x < width; ++x) {
				tt = grid[x][y].template;
				if (tt.last_valid != rc) {
					img = tt.get_image(rc);
				} else {
					img = tt.latest_image;
				}
				
				$gfx_blit_image(img, x * 40 - offset_x, y * 40 - offset_y);
			}
		}
		
		for (sprite : this.sprites) {
			sprite.render(rc, offset_x, offset_y);
		}
	}
}