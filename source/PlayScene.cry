import Math;
import TwoCansAlpha2;

class PlayScene : AbstractScene {
	static field SIZE_CHECK = {
		'soda': 10
	};
	
	field id;
	field map;
	field player;
	field sprites;
	field object_count;
	
	constructor(id) : base() {
		this.id = id;
		this.map = new Map(id);
		this.map.scene = this;
		this.player = null;
		sprites = [];
		signs = [];
		for (sprite_data : this.map.sprites) {
			type = sprite_data[0];
			x = sprite_data[1] + .5;
			y = sprite_data[2] + 1;
			sprite = new Sprite(type, x, y);
			if (type == 'player') {
				this.player = sprite;
			}
			sprite.map = this.map;
			sprite.scene = this;
			if (sprite.immune) {
				signs.add(sprite);
			} else {
				sprites.add(sprite);
			}
		}
		
		this.sprites = signs + sprites;
		
		this.player.inhaling = false;
		this.object_count = 0;
		
		if (this.id == 'win' ||
			this.id == 'level2') {
			
			this.object_count = 4;
		}
		
		this.update_player_height();
	}
	
	function update_player_height() {
		this.player.height = .75 + .24 * this.object_count;
	}
	
	function update(inputManager, events) {
		this.update_player_height();
		
		if (this.player.ground == this.map.goal_tile) {
			next_level = get_next_level(this.id);
			if (next_level == null) {
				next_scene = new TitleScene();
			} else {
				next_scene = new PlayScene(get_next_level(this.id));
			}
			this.switchScene(new FadeScene(this, next_scene));
		}
		
		for (event : events) {
			// TODO: use generic game input events
			if (event.key != null) {
				switch (event.key) {
					case KeyboardKey.SPACE:
					case KeyboardKey.UP:
						if (event.down) {
							if (this.player.ground != null) {
								this.player.ground = null;
								this.player.vy = -(.7 + this.object_count * .1);
							}
						} else {
							if (this.player.ground == null && this.player.vy < 0) {
								this.player.vy = 0;
							}
						}
						break;
					
					case KeyboardKey.R:
						if (event.down) {
							this.switchScene(new FadeScene(this, new PlayScene(this.id)));
						}
						break;
					default:
						break;
				}
			}
		}
		
		
		this.player.inhaling = inputManager.isKeyPressed(KeyboardKey.Z);
		v = .2;
		if (this.player.inhaling) {
			v = 0;
		}
		if (inputManager.isKeyPressed(KeyboardKey.LEFT)) {
			this.player.dx = -v;
			this.player.facing_right = false;
		} else if (inputManager.isKeyPressed(KeyboardKey.RIGHT)) {
			this.player.dx = v;
			this.player.facing_right = true;
		}
		
		grid = this.map.grid;
		
		for (sprite : this.sprites) {
			sprite.map = this.map;
			if (!sprite.immune) {
				sprite.ghost = false;
			}
		}
		
		if (this.player.inhaling) {
			INHALE_DISTANCE = 4.0;
			nearby = [];
			player_x = this.player.x;
			player_y = this.player.y - this.player.height / 2;
			right = this.player.facing_right;
			for (sprite : this.sprites) {
				if (sprite != this.player && !sprite.immune) {
					size_check = PlayScene.SIZE_CHECK.get(sprite.type, null);
					size_check = size_check == null || size_check <= this.object_count;
					if (size_check) {
						dy = Math.abs(player_y - (sprite.y - sprite.height / 2));
						dx = player_x - sprite.x;
						dist = (dx ** 2 + dy ** 2) ** .5;
						if (dist < INHALE_DISTANCE) {
							if (dist < .3) {
								sprite.dead = true;
								this.object_count++;
								if (Sprite.CANT_EAT.get(sprite.type, false)) {
									this.player.death_counter++;
									this.switchScene(new FadeScene(this, new PlayScene(this.id)));
								}
							}
							if (right) {
								if (sprite.x > player_x) {
									nearby.add(sprite);
									nearby.add(dist);
								}
							} else {
								if (sprite.x < player_x) {
									nearby.add(sprite);
									nearby.add(dist);
								}
							}
						}
						sprite.ghost = false;
					}
				}
			}
			
			for (i = 0; i < nearby.length; i += 2) {
				sprite = nearby[i];
				intensity = 1.0 - nearby[i + 1] / INHALE_DISTANCE; // intensity is 0.0 to 1.0
				sum = 3 + intensity;
				x = (sprite.x * 3 + player_x * intensity) / sum;
				y = ((sprite.y - sprite.height / 2) * 3 + player_y * intensity) / sum;
				sprite.dx = x - sprite.x;
				sprite.dy = y - (sprite.y - sprite.height / 2);
				sprite.ghost = true;
			}
		}
		
		new_sprites = [];
		for (sprite : this.sprites) {
			sprite.update(this, grid);
			
			if (!sprite.dead) {
				new_sprites.add(sprite);
			}
		}
		
		this.sprites = new_sprites;
		
	}
	
	function render() {
		rc = get_render_counter();
		
		offset_x = Math.floor(this.player.x * 40) - GAME_WIDTH / 2;
		offset_y = Math.floor((this.player.y - this.player.height / 2) * 40) - GAME_HEIGHT / 2;
		// TODO: bound the edges so you don't see the void beyond the fridge
		// TODO: ...unless the width or height is smaller than the screen, in which case center the map.
		height = this.map.height;
		width = this.map.width;
		grid = this.map.grid;
		
		left = 0;
		top = 0;
		bottom = height - 1;
		right = width - 1;
		
		left_pixel = left * 40 - offset_x;
		right_pixel = right * 40 - offset_x;
		top_pixel = top * 40 - offset_y;
		bottom_pixel = bottom * 40 - offset_y;
		
		// This is all broken. 
		crop_left = Math.floor(-left_pixel / 40) + 1;//- 1;
		crop_right = Math.floor((right_pixel - GAME_WIDTH) / 40) - 1;
		crop_top = Math.floor(top_pixel / 40) - 1;
		crop_bottom = Math.floor((bottom_pixel - GAME_HEIGHT) / 40) - 1;
		if (crop_left < 0) crop_left = 0;
		if (crop_right < 0) crop_right = 0;
		if (crop_top < 0) crop_top = 0;
		if (crop_bottom < 0) crop_bottom = 0;
		// so mark everything as 0
		// TODO: fix it
		crop_left = 0;
		crop_top = 0;
		crop_right = 0;
		crop_bottom = 0;
		
		left += crop_left;
		right -= crop_right;
		top += crop_top;
		bottom -= crop_bottom;
		
		for (y = top; y <= bottom; ++y) {
			for (x = left; x <= right; ++x) {
				tt = grid[x][y].template;
				if (tt.last_valid != rc) {
					img = tt.get_image(rc);
				} else {
					img = tt.latest_image;
				}
				
				img.draw(x * 40 - offset_x, y * 40 - offset_y);
			}
		}
		
		for (sprite : this.sprites) {
			sprite.render(rc, offset_x, offset_y);
		}
	}
}
